[alias]
preflight = ! bash -c "rm -f monitor/clock.json && openaps mmtune && openaps report invoke monitor/clock.json 2>/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || ( mm-stick warmup || echo PREFLIGHT SLEEP; sleep 120; echo PREFLIGHT FAIL; exit 1 )"
preflight-old = ! bash -c "rm -f monitor/clock.json && openaps report invoke monitor/clock.json 2>/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || ( mm-stick warmup || (sudo oref0-reset-usb && echo PREFLIGHT SLEEP && sleep 120); echo PREFLIGHT FAIL; exit 1 )"
history-old = report invoke monitor/model.json monitor/pump-history.json monitor/clock-zoned.json monitor/pump-history-zoned.json
history = ! bash -c "(openaps report invoke monitor/model.json monitor/status.json monitor/pump-history.json monitor/clock-zoned.json monitor/pump-history-zoned.json && test $(cat monitor/status.json | json bolusing) == false) || (echo Pump bolusing, waiting to pull history; exit 1)"
gather = report invoke monitor/active-basal-profile.json monitor/reservoir.json monitor/settings.json monitor/battery.json monitor/bg-targets.json monitor/insulin-sensitivities.json monitor/carb-ratios.json monitor/temp-basal-status.json monitor/meal.json monitor/latest-treatments.json predict/profile.json
latest-ns-treatment-time = ! bash -c "openaps use latest-treatments shell | json created_at"
format-latest-nightscout-treatments = ! bash -c "nightscout cull-latest-openaps-treatments monitor/pump-history-zoned.json monitor/model.json $(openaps latest-ns-treatment-time) > monitor/upload-treatments.json"
enact-old = ! bash -c "rm -vf predict/oref0.json; openaps report invoke predict/iob.json predict/oref0.json && cat predict/oref0.json && grep -q duration predict/oref0.json && ( openaps report invoke control/enacted.json && cat control/enacted.json ) || echo No action required"
enact = ! bash -c "rm -vf predict/oref0.json; openaps report invoke predict/iob.json predict/oref0.json && if (cat predict/oref0.json && grep -q duration predict/oref0.json); then ( openaps report invoke control/enacted.json || openaps report invoke control/enacted.json; grep -q duration control/enacted.json || openaps report invoke control/enacted.json ) 2>&1 | egrep -v \"^  \" && cat control/enacted.json | json -e \"if(this.duration === this.requested.duration){ this.recieved = true }\" | tee control/enacted.json; else echo No action required; fi"
upload = ! bash -c "openaps format-latest-nightscout-treatments && test $(json -f monitor/upload-treatments.json -a created_at eventType | wc -l ) -gt 0 && (openaps use ns-upload shell treatments.json monitor/upload-treatments.json ) || echo \"No recent treatments to upload\""
upload-fake = ! bash -c "echo skipping upload"
status-upload = ! bash -c "openaps report invoke monitor/upload-status.json && (openaps use ns-upload shell devicestatus.json monitor/upload-status.json )"
wait-for-bg = ! bash -c "touch monitor/glucose.json; cp monitor/glucose.json monitor/last-glucose.json; while(diff -q monitor/last-glucose.json monitor/glucose.json); do echo -n .; sleep 10; openaps get-bg; done"
wait-loop = ! bash -c "openaps preflight && openaps history && openaps upload && openaps gather && openaps wait-for-bg && openaps enact"
loop = ! bash -c "openaps preflight && openaps history && openaps upload && openaps gather && openaps get-bg && openaps enact"
retry-loop = ! bash -c "openaps wait-loop || until( ! mm-stick warmup || ! openaps preflight || openaps loop); do sleep 10; done; openaps preflight"
push = ! bash -c "(git push && echo 'pushed to github') || echo 'unable to push to github'"
glucose-local = report invoke monitor/glucose.json
glucose-ns = report invoke monitor/glucose-ns.json
get-bg = ! bash -c "rm -f monitor/glucose*.json && openaps glucose-local 2>/dev/null || ( openaps glucose-ns && grep -q sgv monitor/glucose-ns.json && mv monitor/glucose-ns.json monitor/glucose.json )"
mmtune = ! bash -c "openaps report invoke monitor/mmtune.txt; cat monitor/mmtune.txt | egrep -v 'rssi:-99.0|OK|Ver|Open'"

[vendor "openapscontrib.mmhistorytools"]
path = .
module = 